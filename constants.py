# --- START OF FILE constants.py ---

# constants.py
"""Константы и настройки приложения."""
import os

# --- Настройки главного окна ---
MAIN_WINDOW_WIDTH = 450  # Немного расширено
MAIN_WINDOW_HEIGHT = 300 # Увеличено для списка

# --- Настройки авто-поиска ---
# !!! ОБЯЗАТЕЛЬНО УСТАНОВИТЕ ЭТУ ОБЛАСТЬ !!!
# Прямоугольник, охватывающий ВСЕ элементы списка в игре.
# Если 0,0,0,0, None или пустой словарь, будет использоваться основной монитор.
# Формат: {'left': X, 'top': Y, 'width': W, 'height': H}
# Пример: SCAN_AREA = {'top': 150, 'left': 50, 'width': 1200, 'height': 700}
SCAN_AREA = {"left": 609, "top": 210, "width": 1679, "height": 1024} # Установите свои значения или оставьте 0 для автоопределения

# Пауза между сканированиями, ЕСЛИ НИЧЕГО НЕ НАЙДЕНО И НЕ БЫЛО ОБНОВЛЕНИЯ
SCAN_INTERVAL_WHEN_NOT_FOUND = 0.15 # Немного увеличено для снижения нагрузки

# --- Настройки поиска по шаблону ---
# Порог срабатывания для cv2.matchTemplate (от 0.0 до 1.0).
TEMPLATE_MATCH_THRESHOLD = 0.75 # Увеличено для точности

# Имя папки для сохранения шаблонов (изображений названий).
TEMPLATE_FOLDER = "item_templates"

# --- Прочее ---
# Пауза в главном цикле Worker'а для снижения нагрузки на CPU (мгновенная пауза при действии/обновлении)
WORKER_LOOP_PAUSE = 0.02 # Очень короткая пауза, основная пауза после действия

# Пауза ПОСЛЕ выполнения действия (Клик+ESC) перед следующим сканированием
POST_ACTION_PAUSE = 1.0 # Увеличено для стабильности после клика/ESC

# --- Настройки области поиска цены и OCR ---
# !!! КРИТИЧЕСКИ ВАЖНО НАСТРОИТЬ ПРАВИЛЬНО !!!
# Прямоугольная область, в которой будет выполняться поиск текста цены,
# ОТНОСИТЕЛЬНО ВЕРХНЕ-ЛЕВОГО угла БАУНДИНГ БОКСА найденного НАЗВАНИЯ товара.
# Эта область используется для ВЫРЕЗАНИЯ ИЗОБРАЖЕНИЯ, на котором будет работать OCR.
# Она должна быть достаточно большой, чтобы охватить ВСЕ возможные положения цены
# относительно названия (справа на той же строке ИЛИ на следующей строке).
# Формат: (X_OFFSET_REL, Y_OFFSET_REL, WIDTH, HEIGHT)
# Пример: PRICE_SEARCH_RELATIVE_AREA = (0, 20, 400, 80) # Начинаем на 20px ниже верха названия, шириной 400, высотой 80.
PRICE_SEARCH_RELATIVE_AREA = (0, 25, 300, 50) # ПРИМЕРНЫЕ ЗНАЧЕНИЯ - ТРЕБУЮТ НАСТРОЙКИ!

# Минимальная уверенность распознавания для текстового блока,
# чтобы считать его потенциальной ценой (от 0.0 до 1.0).
# Помогает отфильтровать случайные символы, распознанные как цифры.
PRICE_OCR_CONFIDENCE_THRESHOLD = 0.6 # Можно увеличить до 0.7-0.8, если много ложных срабатываний

# --- Настройки позиционной фильтрации OCR блоков цены ---
# После выполнения OCR на PRICE_SEARCH_RELATIVE_AREA, найденные текстовые блоки
# фильтруются по их положению ОТНОСИТЕЛЬНО БАУНДИНГ БОКСА НАЙДЕННОГО НАЗВАНИЯ.
# Эти константы определяют допустимые диапазоны для ВЕРХНЕГО ЛЕВОГО угла OCR блока
# относительно ВЕРХНЕГО ЛЕВОГО и НИЖНЕГО ЛЕВОГО углов БОКСА НАЗВАНИЯ.

# Минимальный горизонтальный сдвиг (вправо) от ЛЕВОГО края БОКСА НАЗВАНИЯ
# для ЛЕВОГО края блока цены. Помогает пропустить иконки и начало текста названия.
# Измеряется в пикселях.
# Был 80. Уменьшено до 30.
PRICE_MIN_HORIZONTAL_OFFSET_FROM_TEMPLATE_LEFT = 30 # Уменьшено - ТРЕБУЕТ НАСТРОЙКИ!

# Минимальный вертикальный сдвиг (вниз) от НИЖНЕГО края БОКСА НАЙДЕННОГО НАЗВАНИЯ
# для ВЕРХНЕГО края блока цены. Определяет начало строки цены под названием.
# Измеряется в пикселях.
# Был 5. Уменьшено до 0.
PRICE_MIN_VERTICAL_OFFSET_FROM_TEMPLATE_BOTTOM = 0 # Уменьшено - ТРЕБУЕТ НАСТРОЙКИ!

# Максимальный вертикальный сдвиг (вниз) от НИЖНЕГО края БОКСА НАЙДЕННОГО НАЗВАНИЯ
# для ВЕРХНЕГО края блока цены. Определяет конец строки цены под названием.
# Измеряется в пикселях.
# Был 40. Оставим пока так.
PRICE_MAX_VERTICAL_OFFSET_FROM_TEMPLATE_BOTTOM = 40 # ТРЕБУЕТ НАСТРОЙКИ!


# Название окна игры (пока не используется активно).
TARGET_WINDOW_TITLE = "Grand Theft Auto V"

# --- Настройки OCR ---
# Языки для EasyOCR. 'en' и 'ru'
OCR_LANGUAGES = ["en", "ru"]
# Разрешенные символы для распознавания ЦЕНЫ.
# Должны включать цифры, пробелы и символ валюты ($).
# Добавлена запятая как возможный разделитель тысяч.
OCR_PRICE_ALLOWLIST = "0123456789$ ,"

# --- Горячие клавиши ---
# Используются библиотекой 'keyboard'.
# Список названий клавиш: https://github.com/sentientmatter/py-simple-keyboard/blob/master/keyboard/__init__.py
# Пример: 'f10', 'ctrl+shift+a', 'alt+p', 'cmd+space', 'esc'
# Для Numpad клавиши обычно именуются как есть, например '+', '-', '*'
ADD_ITEM_HOTKEY = "-" # Numpad '-'
STOP_MONITORING_HOTKEY = "*" # Numpad '*'

# --- Файл данных ---
ITEM_DATA_FILE = "market_items.json"

# --- Настройки авто-обновления ---
# Координаты кнопки "Обновить список" или аналогичного действия.
# Если не используются, установите None.
REFRESH_BUTTON_X = 385 # Примерные координаты
REFRESH_BUTTON_Y = 182 # Примерные координаты
# Пауза после клика на обновление перед следующим сканом.
REFRESH_PAUSE = 1.0
# Минимальный интервал между попытками обновления, если ничего не найдено.
MIN_REFRESH_INTERVAL = 7.0 # Увеличено для снижения бесполезных кликов

# --- Настройки по умолчанию для новых товаров ---
DEFAULT_ITEM_ENABLED = True
DEFAULT_ITEM_QUANTITY = 1
DEFAULT_ITEM_MAX_PRICE = 0 # 0 означает без лимита

# --- Отладка ---
# --- ОТЛАДКА: Сохранять изображение ОБЛАСТИ ПОИСКА цены? ---
# Помогает настроить PRICE_SEARCH_RELATIVE_AREA и проверить, что OCR видит.
# Установите True для отладки, False для обычной работы.
DEBUG_SAVE_PRICE_ROI = True

# Путь для сохранения отладочного ROI цены (относительно BASE_DIR)
DEBUG_PRICE_ROI_PATH = "_debug_price_roi.png"

# --- Имя файла лога ---
LOG_FILE_NAME = "market_helper.log"

# --- END OF FILE constants.py ---